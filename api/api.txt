from flask import Flask, request,jsonify
# from classification.Classifier import Classifier
# # from .Classifier import get_query_keywords
# from extraction.Extractor import Extractor
import pandas as pd
import pymysql
import json

from flask import Flask, request
from Classifier import Classifier
# from .Classifier import get_query_keywords
from Extractor import Extractor
from json import JSONEncoder
app = Flask(__name__)


class QueryAnswer():
    def __init__(self, sql_result):
        p_title= sql_result["pieceTitle"][0]
        p_con=sql_result["content"][0]
        l_name=sql_result["legislationName"][0]
        l_index=str(sql_result["legislationIndex"][0])

        self.pieceTitle = p_title
        self.content = p_con
        self.legislationName = l_name
        self.legislationIndex = l_index

# def query_answer_serializer(queryAnswer):
class serializer(JSONEncoder):
    def default(self, o):
        return o.__dict__

@app.route('/search', methods=['GET', 'POST'])
def result():
    return_json_answer = json.dumps("No place information is given")
    query = "what are my human rights?"
    if query != None:
        C = Classifier("svm.pickle","tfidf.pickle")
        queryCategory = C.get_category_of_text(query)

        E = Extractor(queryCategory)
        piece_indexes = E.get_ranked_documents("my human rights")

        five_doc_content = []

        host = "classified-legislation.cfb1te3o5nxb.ap-south-1.rds.amazonaws.com"
        port = 3306
        dbname = "classify-legislation"
        user = "admin"
        password = "legalLankan2020"
        conn = pymysql.connect(host=host, user=user, port=port, passwd=password, db=dbname)

        for element in piece_indexes:
            temp = {}
            sql = '''select p.pieceTitle, p.content, l.legislationIndex, l.legislationName
               from piece p, legislation l
               where p.pieceIndex=''' + element + " and l.legislationIndex=p.legislationIndex;"

            sql_result = pd.read_sql(sql, con=conn)

            Q = QueryAnswer(sql_result)
            JSONData = json.dumps(Q, indent=4, cls=serializer)
            five_doc_content.append(JSONData)


        return_json_answer =  json.dumps(five_doc_content)


    return return_json_answer


if __name__ == '__main__':
    app.run(debug=True)


